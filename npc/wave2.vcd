$version Generated by VerilatedVcd $end
$date Sat May 21 11:01:34 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 A! clk $end
  $var wire  1 B! rst $end
  $scope module top $end
   $var wire 32 b addr [31:0] $end
   $var wire  1 A! clk $end
   $var wire 32 w data1 [31:0] $end
   $var wire 32 x data2 [31:0] $end
   $var wire 32 y data_mem [31:0] $end
   $var wire 32 d ext_imm [31:0] $end
   $var wire 32 c instr [31:0] $end
   $var wire  1 e lw_en $end
   $var wire  1 B! rst $end
   $var wire  1 f sw_en $end
   $scope module cpu_cpu $end
    $var wire 32 b addr [31:0] $end
    $var wire  1 A! clk $end
    $var wire 32 w data1 [31:0] $end
    $var wire 32 x data2 [31:0] $end
    $var wire 32 { data_in2 [31:0] $end
    $var wire 32 y data_mem [31:0] $end
    $var wire 32 | data_out [31:0] $end
    $var wire 32 d ext_imm [31:0] $end
    $var wire  1 n func $end
    $var wire  3 k func3 [2:0] $end
    $var wire 12 o imm [11:0] $end
    $var wire 32 c instr [31:0] $end
    $var wire 32 p jmp [31:0] $end
    $var wire  1 g jmp_en $end
    $var wire  1 C! jmpb_en $end
    $var wire  1 h jmpr_en $end
    $var wire  1 e lw_en $end
    $var wire 32 z offset [31:0] $end
    $var wire  7 i op [6:0] $end
    $var wire  1 E! pass $end
    $var wire  5 j rd [4:0] $end
    $var wire  5 l rs1 [4:0] $end
    $var wire  5 m rs2 [4:0] $end
    $var wire  1 B! rst $end
    $var wire  1 r sub_en $end
    $var wire  1 f sw_en $end
    $var wire 32 D! wr_data [31:0] $end
    $var wire  1 q wr_en $end
    $scope module alu_cpu $end
     $var wire 32 w data_in1 [31:0] $end
     $var wire 32 { data_in2 [31:0] $end
     $var wire 32 | data_out [31:0] $end
     $var wire  1 n func $end
     $var wire  3 k func3 [2:0] $end
     $var wire  5 } shamt [4:0] $end
     $var wire  1 r sub_en $end
    $upscope $end
    $scope module control_cpu $end
     $var wire  1 n func $end
     $var wire  1 g jmp_en $end
     $var wire  1 C! jmpb_en $end
     $var wire  1 h jmpr_en $end
     $var wire  1 e lw_en $end
     $var wire  7 i op [6:0] $end
     $var wire  1 E! pass $end
     $var wire  1 r sub_en $end
     $var wire  1 f sw_en $end
     $var wire  1 q wr_en $end
    $upscope $end
    $scope module data_in2_sel_cpu $end
     $var wire 32 x data2 [31:0] $end
     $var wire 32 { data_in2 [31:0] $end
     $var wire 32 d ext_imm [31:0] $end
     $var wire  1 s sel $end
    $upscope $end
    $scope module decode_cpu $end
     $var wire  1 n func $end
     $var wire  3 k func3 [2:0] $end
     $var wire 12 o imm [11:0] $end
     $var wire 32 c instr [31:0] $end
     $var wire 32 p jmp [31:0] $end
     $var wire  7 i op [6:0] $end
     $var wire  5 j rd [4:0] $end
     $var wire  5 l rs1 [4:0] $end
     $var wire  5 m rs2 [4:0] $end
    $upscope $end
    $scope module ext32_cpu $end
     $var wire 32 d ext_imm [31:0] $end
     $var wire 12 o imm [11:0] $end
    $upscope $end
    $scope module offset_sel_cpu $end
     $var wire 32 w data1 [31:0] $end
     $var wire 32 d ext_imm [31:0] $end
     $var wire 32 p jmp [31:0] $end
     $var wire 32 z offset [31:0] $end
     $var wire  2 v sel [1:0] $end
    $upscope $end
    $scope module pass_jud_cpu $end
     $var wire 32 w data1 [31:0] $end
     $var wire 32 x data2 [31:0] $end
     $var wire  3 k func3 [2:0] $end
     $var wire  1 E! pass $end
    $upscope $end
    $scope module pc_cpu $end
     $var wire 32 b addr [31:0] $end
     $var wire  1 A! clk $end
     $var wire  1 g jmp_en $end
     $var wire  1 C! jmpb_en $end
     $var wire  1 h jmpr_en $end
     $var wire 32 F! next_addr [31:0] $end
     $var wire 32 z offset [31:0] $end
     $var wire  1 B! rst $end
    $upscope $end
    $scope module register_cpu $end
     $var wire  1 A! clk $end
     $var wire 32 w data1 [31:0] $end
     $var wire 32 x data2 [31:0] $end
     $var wire  5 j rd [4:0] $end
     $var wire 32 C register(1) [31:0] $end
     $var wire 32 L register(10) [31:0] $end
     $var wire 32 M register(11) [31:0] $end
     $var wire 32 N register(12) [31:0] $end
     $var wire 32 O register(13) [31:0] $end
     $var wire 32 P register(14) [31:0] $end
     $var wire 32 Q register(15) [31:0] $end
     $var wire 32 R register(16) [31:0] $end
     $var wire 32 S register(17) [31:0] $end
     $var wire 32 T register(18) [31:0] $end
     $var wire 32 U register(19) [31:0] $end
     $var wire 32 D register(2) [31:0] $end
     $var wire 32 V register(20) [31:0] $end
     $var wire 32 W register(21) [31:0] $end
     $var wire 32 X register(22) [31:0] $end
     $var wire 32 Y register(23) [31:0] $end
     $var wire 32 Z register(24) [31:0] $end
     $var wire 32 [ register(25) [31:0] $end
     $var wire 32 \ register(26) [31:0] $end
     $var wire 32 ] register(27) [31:0] $end
     $var wire 32 ^ register(28) [31:0] $end
     $var wire 32 _ register(29) [31:0] $end
     $var wire 32 E register(3) [31:0] $end
     $var wire 32 ` register(30) [31:0] $end
     $var wire 32 a register(31) [31:0] $end
     $var wire 32 F register(4) [31:0] $end
     $var wire 32 G register(5) [31:0] $end
     $var wire 32 H register(6) [31:0] $end
     $var wire 32 I register(7) [31:0] $end
     $var wire 32 J register(8) [31:0] $end
     $var wire 32 K register(9) [31:0] $end
     $var wire  5 l rs1 [4:0] $end
     $var wire  5 m rs2 [4:0] $end
     $var wire 32 D! wr_data [31:0] $end
     $var wire  1 q wr_en $end
    $upscope $end
    $scope module wr_data_sel_cpu $end
     $var wire 32 b addr [31:0] $end
     $var wire 32 y data_mem [31:0] $end
     $var wire 32 | data_out [31:0] $end
     $var wire  1 t sel1 $end
     $var wire  1 u sel2 $end
     $var wire 32 D! wr_data [31:0] $end
    $upscope $end
   $upscope $end
   $scope module data_mem_cpu $end
    $var wire 32 ~ addr [31:0] $end
    $var wire  8 !! data(0) [7:0] $end
    $var wire  8 "! data(1) [7:0] $end
    $var wire  8 +! data(10) [7:0] $end
    $var wire  8 ,! data(11) [7:0] $end
    $var wire  8 -! data(12) [7:0] $end
    $var wire  8 .! data(13) [7:0] $end
    $var wire  8 /! data(14) [7:0] $end
    $var wire  8 0! data(15) [7:0] $end
    $var wire  8 1! data(16) [7:0] $end
    $var wire  8 2! data(17) [7:0] $end
    $var wire  8 3! data(18) [7:0] $end
    $var wire  8 4! data(19) [7:0] $end
    $var wire  8 #! data(2) [7:0] $end
    $var wire  8 5! data(20) [7:0] $end
    $var wire  8 6! data(21) [7:0] $end
    $var wire  8 7! data(22) [7:0] $end
    $var wire  8 8! data(23) [7:0] $end
    $var wire  8 9! data(24) [7:0] $end
    $var wire  8 :! data(25) [7:0] $end
    $var wire  8 ;! data(26) [7:0] $end
    $var wire  8 <! data(27) [7:0] $end
    $var wire  8 =! data(28) [7:0] $end
    $var wire  8 >! data(29) [7:0] $end
    $var wire  8 $! data(3) [7:0] $end
    $var wire  8 ?! data(30) [7:0] $end
    $var wire  8 @! data(31) [7:0] $end
    $var wire  8 %! data(4) [7:0] $end
    $var wire  8 &! data(5) [7:0] $end
    $var wire  8 '! data(6) [7:0] $end
    $var wire  8 (! data(7) [7:0] $end
    $var wire  8 )! data(8) [7:0] $end
    $var wire  8 *! data(9) [7:0] $end
    $var wire 32 w data1 [31:0] $end
    $var wire 32 x data2 [31:0] $end
    $var wire 32 y data_mem [31:0] $end
    $var wire 32 d ext_imm [31:0] $end
    $var wire  1 e lw_en $end
    $var wire  1 f sw_en $end
   $upscope $end
   $scope module instr_mem_cpu $end
    $var wire 32 b addr [31:0] $end
    $var wire 32 c instr [31:0] $end
    $var wire  8 # instr_mem(0) [7:0] $end
    $var wire  8 $ instr_mem(1) [7:0] $end
    $var wire  8 - instr_mem(10) [7:0] $end
    $var wire  8 . instr_mem(11) [7:0] $end
    $var wire  8 / instr_mem(12) [7:0] $end
    $var wire  8 0 instr_mem(13) [7:0] $end
    $var wire  8 1 instr_mem(14) [7:0] $end
    $var wire  8 2 instr_mem(15) [7:0] $end
    $var wire  8 3 instr_mem(16) [7:0] $end
    $var wire  8 4 instr_mem(17) [7:0] $end
    $var wire  8 5 instr_mem(18) [7:0] $end
    $var wire  8 6 instr_mem(19) [7:0] $end
    $var wire  8 % instr_mem(2) [7:0] $end
    $var wire  8 7 instr_mem(20) [7:0] $end
    $var wire  8 8 instr_mem(21) [7:0] $end
    $var wire  8 9 instr_mem(22) [7:0] $end
    $var wire  8 : instr_mem(23) [7:0] $end
    $var wire  8 ; instr_mem(24) [7:0] $end
    $var wire  8 < instr_mem(25) [7:0] $end
    $var wire  8 = instr_mem(26) [7:0] $end
    $var wire  8 > instr_mem(27) [7:0] $end
    $var wire  8 ? instr_mem(28) [7:0] $end
    $var wire  8 @ instr_mem(29) [7:0] $end
    $var wire  8 & instr_mem(3) [7:0] $end
    $var wire  8 A instr_mem(30) [7:0] $end
    $var wire  8 B instr_mem(31) [7:0] $end
    $var wire  8 ' instr_mem(4) [7:0] $end
    $var wire  8 ( instr_mem(5) [7:0] $end
    $var wire  8 ) instr_mem(6) [7:0] $end
    $var wire  8 * instr_mem(7) [7:0] $end
    $var wire  8 + instr_mem(8) [7:0] $end
    $var wire  8 , instr_mem(9) [7:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000 #
b00000000 $
b00000000 %
b00000000 &
b00000000 '
b00000000 (
b00000000 )
b00000000 *
b00000000 +
b00000000 ,
b00000000 -
b00000000 .
b00000000 /
b00000000 0
b00000000 1
b00000000 2
b00000000 3
b00000000 4
b00000000 5
b00000000 6
b00000000 7
b00000000 8
b00000000 9
b00000000 :
b00000000 ;
b00000000 <
b00000000 =
b00000000 >
b00000000 ?
b00000000 @
b00000000 A
b00000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
0e
0f
0g
0h
b0000000 i
b00000 j
b000 k
b00000 l
b00000 m
0n
b000000000000 o
b00000000000000000000000000000000 p
0q
0r
0s
0t
0u
b00 v
b00000000000000000000000000000000 w
b00000000000000000000000000000000 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
b00000 }
b00000000000000000000000000000000 ~
b00000000 !!
b00000000 "!
b00000000 #!
b00000000 $!
b00000000 %!
b00000000 &!
b00000000 '!
b00000000 (!
b00000000 )!
b00000000 *!
b00000000 +!
b00000000 ,!
b00000000 -!
b00000000 .!
b00000000 /!
b00000000 0!
b00000000 1!
b00000000 2!
b00000000 3!
b00000000 4!
b00000000 5!
b00000000 6!
b00000000 7!
b00000000 8!
b00000000 9!
b00000000 :!
b00000000 ;!
b00000000 <!
b00000000 =!
b00000000 >!
b00000000 ?!
b00000000 @!
1A!
1B!
0C!
b00000000000000000000000000000000 D!
1E!
b00000000000000000000000000000000 F!
#1
b00000001 '
b00000010 )
b01101111 *
0A!
#2
1A!
#3
0A!
#4
1A!
0B!
#5
0A!
b00000000000000000000000000000100 F!
#6
b00000000000000000000000000000100 b
b00000001000000000000001001101111 c
1g
b1101111 i
b00100 j
b10000 m
b00000000000000000000000000001000 p
1q
1s
1u
b11 v
b00000000000000000000000000001000 z
1A!
b00000000000000000000000000001000 D!
#7
b00000000000000000000000000001000 F
0A!
b00000000000000000000000000010100 F!
#8
b00000000000000000000000000010100 b
b00000000000000000000000000000000 c
0g
b0000000 i
b00000 j
b00000 m
b00000000000000000000000000000000 p
0q
0s
0u
b00 v
b00000000000000000000000000000000 z
1A!
b00000000000000000000000000000000 D!
#9
0A!
b00000000000000000000000000011000 F!
#10
b00000000000000000000000000011000 b
1A!
#11
0A!
b00000000000000000000000000011100 F!
#12
b00000000000000000000000000011100 b
1A!
#13
0A!
b00000000000000000000000000100000 F!
#14
b00000000000000000000000000100000 b
1A!
#15
0A!
b00000000000000000000000000100100 F!
#16
b00000000000000000000000000100100 b
b00000001000000000000001001101111 c
1g
b1101111 i
b00100 j
b10000 m
b00000000000000000000000000001000 p
1q
1s
1u
b11 v
b00000000000000000000000000001000 z
1A!
b00000000000000000000000000101000 D!
#17
b00000000000000000000000000101000 F
0A!
b00000000000000000000000000110100 F!
#18
b00000000000000000000000000110100 b
b00000000000000000000000000000000 c
0g
b0000000 i
b00000 j
b00000 m
b00000000000000000000000000000000 p
0q
0s
0u
b00 v
b00000000000000000000000000000000 z
1A!
b00000000000000000000000000000000 D!
#19
0A!
b00000000000000000000000000111000 F!
#20
b00000000000000000000000000111000 b
1A!
#21
0A!
b00000000000000000000000000111100 F!
#22
b00000000000000000000000000111100 b
1A!
#23
0A!
b00000000000000000000000001000000 F!
#24
b00000000000000000000000001000000 b
1A!
#25
0A!
b00000000000000000000000001000100 F!
#26
b00000000000000000000000001000100 b
b00000001000000000000001001101111 c
1g
b1101111 i
b00100 j
b10000 m
b00000000000000000000000000001000 p
1q
1s
1u
b11 v
b00000000000000000000000000001000 z
1A!
b00000000000000000000000001001000 D!
#27
b00000000000000000000000001001000 F
0A!
b00000000000000000000000001010100 F!
#28
b00000000000000000000000001010100 b
b00000000000000000000000000000000 c
0g
b0000000 i
b00000 j
b00000 m
b00000000000000000000000000000000 p
0q
0s
0u
b00 v
b00000000000000000000000000000000 z
1A!
b00000000000000000000000000000000 D!
#29
0A!
b00000000000000000000000001011000 F!
#30
b00000000000000000000000001011000 b
1A!
#31
0A!
b00000000000000000000000001011100 F!
#32
b00000000000000000000000001011100 b
1A!
#33
0A!
b00000000000000000000000001100000 F!
#34
b00000000000000000000000001100000 b
1A!
#35
0A!
b00000000000000000000000001100100 F!
#36
b00000000000000000000000001100100 b
b00000001000000000000001001101111 c
1g
b1101111 i
b00100 j
b10000 m
b00000000000000000000000000001000 p
1q
1s
1u
b11 v
b00000000000000000000000000001000 z
1A!
b00000000000000000000000001101000 D!
#37
b00000000000000000000000001101000 F
0A!
b00000000000000000000000001110100 F!
#38
b00000000000000000000000001110100 b
b00000000000000000000000000000000 c
0g
b0000000 i
b00000 j
b00000 m
b00000000000000000000000000000000 p
0q
0s
0u
b00 v
b00000000000000000000000000000000 z
1A!
b00000000000000000000000000000000 D!
#39
0A!
b00000000000000000000000001111000 F!
